apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

archivesBaseName = getArchivesBaseName(project.name)
version = rootProject.ext.mdcLibraryVersion

dependencies {
  api compatibility("annotation")
  api compatibility("appcompat")
  api compatibility("cardview")
  api compatibility("coordinatorlayout")
  api compatibility("core")
  api compatibility("dynamicanimation")
  api compatibility("experimental")
  api compatibility("fragment")
  api compatibility("lifecycleRuntime")
  api compatibility("recyclerview")
  api compatibility("transition")
  api compatibility("vectordrawable")
  api compatibility("viewpager2")

  testImplementation "androidx.test:core:${project.rootProject.ext.testRunnerVersion}"
  testImplementation "androidx.test:runner:${project.rootProject.ext.testRunnerVersion}"
  testImplementation "junit:junit:4.12"
  testImplementation "com.google.truth:truth:${project.rootProject.ext.truthVersion}"
  testImplementation "org.mockito:mockito-core:${project.rootProject.ext.mockitoCoreVersion}"
  testImplementation "org.robolectric:robolectric:4.3"

  testAnnotationProcessor "com.google.auto.service:auto-service:1.0-rc4"
}

def srcDirs = [
  'com/google/android/material_m/animation',
  'com/google/android/material_m/appbar',
  'com/google/android/material_m/badge',
  'com/google/android/material_m/behavior',
  'com/google/android/material_m/bottomappbar',
  'com/google/android/material_m/bottomnavigation',
  'com/google/android/material_m/bottomsheet',
  'com/google/android/material_m/button',
  'com/google/android/material_m/canvas',
  'com/google/android/material_m/card',
  'com/google/android/material_m/checkbox',
  'com/google/android/material_m/chip',
  'com/google/android/material_m/circularreveal',
  'com/google/android/material_m/circularreveal/cardview',
  'com/google/android/material_m/circularreveal/coordinatorlayout',
  'com/google/android/material_m/color',
  'com/google/android/material_m/datepicker',
  'com/google/android/material_m/dialog',
  'com/google/android/material_m/drawable',
  'com/google/android/material_m/elevation',
  'com/google/android/material_m/expandable',
  'com/google/android/material_m/floatingactionbutton',
  'com/google/android/material_m/imageview',
  'com/google/android/material_m/internal',
  'com/google/android/material_m/math',
  'com/google/android/material_m/menu',
  'com/google/android/material_m/navigation',
  'com/google/android/material_m/progressindicator',
  'com/google/android/material_m/radiobutton',
  'com/google/android/material_m/resources',
  'com/google/android/material_m/ripple',
  'com/google/android/material_m/shape',
  'com/google/android/material_m/shadow',
  'com/google/android/material_m/slider',
  'com/google/android/material_m/snackbar',
  'com/google/android/material_m/stateful',
  'com/google/android/material_m/switchmaterial',
  'com/google/android/material_m/tabs',
  'com/google/android/material_m/textfield',
  'com/google/android/material_m/textview',
  'com/google/android/material_m/theme',
  'com/google/android/material_m/theme/overlay',
  'com/google/android/material_m/tooltip',
  'com/google/android/material_m/transition',
  'com/google/android/material_m/transformation',
  'com/google/android/material_m/typography',
]

android {
  sourceSets {
    main.manifest.srcFile 'java/com/google/android/material_m/AndroidManifest.xml'
    main.java.srcDir 'java'
    main.java.includes = srcDirs.collect { it + '/**/*.java' }
    main.java.excludes = [
      '**/build/**',
    ]
    srcDirs.forEach {
      main.res.srcDirs += 'java/' + it + '/res'
      main.res.srcDirs += 'java/' + it + '/res-public'
    }

    test.java.srcDir 'javatests'
  }

  testOptions.unitTests.includeAndroidResources = true

  buildTypes.all {
    consumerProguardFiles 'proguard-behaviors.pro', 'proguard-inflater.pro', 'proguard-recyclerview.pro'
  }

  defaultConfig {
    minSdkVersion 14
  }
}

// Add the resource directories to the main sourceSet for all test tasks
gradle.projectsEvaluated {
  tasks.withType(Test) { task ->
    srcDirs.forEach {
      android.sourceSets.main.res.srcDirs += 'javatests/' + it + '/res'
    }
  }
}

task generateJavadocs(type: Javadoc) {
  if (project.hasProperty("online")) {
    options.addStringOption("toroot", "/")
    options.addStringOption("hdf", "android.whichdoc online")
    options.addStringOption("hdf", "dac")
    options.addBooleanOption("devsite", true)
    options.addBooleanOption("yamlV2", true)
    options.addStringOption("dac_libraryroot", "com/google/android/material_m")
    options.addStringOption("dac_dataname", "MATERIAL_DATA")
  }

  if (project.hasProperty("docletPathRoot")) {
    def docletPathRoot = project.property("docletPathRoot")
    def outputPath = project.hasProperty("outputPath") ? project.property("outputPath") : "doclava-out"

    source = android.sourceSets.main.java.source
    source = source.findAll { it.name.endsWith(".java") }

    title = null
    destinationDir = new File(outputPath)
    classpath = files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
    options.addStringOption("federate Android", "https://developer.android.com")
    options.encoding = "UTF-8"
    options.doclet = "com.google.doclava.Doclava"
    options.docletpath = [
      file(docletPathRoot + "/doclava/current/doclava.jar"),
      file(docletPathRoot + "/jsilver/v1_0_0/jsilver.jar")
    ]
  }
}

task getVersion {
  doLast {
    println version
  }
}

task generateApiXml(type: Javadoc) {
  if (project.hasProperty("apiName")) {
    def jdiff = project.property("jdiffJar")
    def apiName = project.property("apiName")
    source = android.sourceSets.main.java.source
    source = source.findAll { it.name.endsWith(".java") }
    classpath = files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
    options.doclet = "jdiff.JDiff"
    options.addStringOption("subpackages", ".")
    options.addStringOption("apiname", apiName)
    options.docletpath = [
      file(jdiff),
    ]
  }

  doLast {
    // Escape incorrect ampersands in API XML file
    ["sed", "-i", "''", "s/ & / \\&amp; /g", "lib/${apiName}.xml"].execute()
  }
}

task generateJdiffReport(type: Javadoc) {
  if (project.hasProperty("oldApi")) {
    def outputPath = project.hasProperty("outputPath") ? project.property("outputPath") : "diffs-out"
    def jdiff = project.property("jdiffjar")
    def xerces = project.property("xercesjar")
    def oldApi = project.property("oldApi")
    def newApi = project.property("newApi")
    def newApiDir = project.property("newApiDir")
    def oldApiDir = project.property("oldApiDir")
    destinationDir = new File(outputPath)
    source = android.sourceSets.main.java.source
    source = source.findAll { it.name.endsWith(".java") }
    classpath = files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
    options.doclet = "jdiff.JDiff"
    options.addStringOption("subpackages", ".")
    options.addStringOption("newapidir", newApiDir)
    options.addStringOption("oldapidir", oldApiDir)
    options.addStringOption("oldapi", oldApi)
    options.addBooleanOption("verbose", true)
    options.addStringOption("newapi", newApi)
    options.docletpath = [
      file(jdiff),
      file(xerces),
    ]
  }
}

def R_CLASS_PATH = "build/generated/not_namespaced_r_class_sources/releaseUnitTest/processReleaseUnitTestResources/r/com/google/android/material_m/R.java"
afterEvaluate {
  [generateJavadocs, generateApiXml].forEach { task ->
    task.dependsOn(':lib:processReleaseUnitTestResources')
    task.source += R_CLASS_PATH

    def releaseVariant = android.libraryVariants.find { it.name == 'release' }
    if (releaseVariant == null) {
      return
    }
    releaseVariant.javaCompileProvider.configure { javaCompileProvider ->
      task.classpath += releaseVariant.getCompileClasspath(null)
      task.classpath += task.project.files(javaCompileProvider.destinationDir)
      task.source += javaCompileProvider.source
    }
  }
}

uploadArchives {
  repositories {
    mavenDeployer {
      repository(url: rootProject.ext.mavenRepoUrl)
    }
  }
}
